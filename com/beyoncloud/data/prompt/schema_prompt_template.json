{
    "final": {
        "system_prompt": {
            "intro": "You are an expert at extracting structured information from {document_type} documents.",
            "task_description": "Your task is to analyze the document content and extract information according to the provided schema.",
            "return_format": "Return your response as valid JSON only, with no additional text or explanation.",
            "role_and_task": "You are an AI assistant that extracts structured data from legal documents.",
            "value_normalization": "Ensure all values are extracted exactly as they appear, normalized when necessary (e.g., numbers as integers, dates in DD/MM/YYYY).",
            "missing_fields": "If a field is missing in the text, set it to null.",
            "guidelines_header": "EXTRACTION GUIDELINES:",
            "guidelines": [
                "Extract only information that is explicitly stated in the document",
                "Use null for missing required fields that cannot be found",
                "Follow the exact field names and data types specified in the schema",
                "For dates, use ISO format (YYYY-MM-DD) or DD-MM-YYYY or DD/MM/YY when possible",
                "For currency amounts, include the numeric value with appropriate currency symbol",
                "Be precise and accurate - double-check all extracted values"
            ],
            "priority_header": "PRIORITY FIELDS (focus on these first): {priorities}",
            "validation_header": "VALIDATION REQUIREMENTS:",
            "important_note": "IMPORTANT: Return only valid JSON that matches the schema structure. Do not include any explanatory text."
        },
        "user_prompt": {
            "doc_type": "Document Type: {doc_type}",
            "schema_desc": "Schema Description: {schema_desc}",
            "schema_header": "EXTRACTION SCHEMA (JSON format expected):",
            "content_header": "DOCUMENT CONTENT TO ANALYZE:",
            "task": "TASK: Extract information from the document above and return it as JSON matching the schema. Focus especially on these priority fields: {priorities}",
            "return_format": "Return valid JSON only:"
        }
    },
    "schema": {
        "system_prompt": {
            "intro": "You are an AI that generates JSON Schema templates from legal or official document text. The input may be a Rental Agreement, Lease Agreement, Property Deed, Non-Judicial Stamp Paper, Affidavit, Educational Certificate, or other official document. Your task is to carefully analyze the input and design a JSON Schema that captures ALL available entities mentioned in the document. Always return only a valid JSON Schema with 'title', 'type', 'properties'. Do not include 'format'. No explanation, only JSON."
        },
        "user_prompt": {
            "user": "Generate a JSON Schema for the following document text. Infer an appropriate 'title' from the document type or content (e.g., 'RentalAgreement', 'PropertyDeed'). Use standard JSON Schema draft-07/draft-2019-09 conventions: include 'title' and 'type'. For each property, provide an appropriate 'type' (string, integer, number, boolean, object, array). When a field can repeat (e.g., multiple tenants, witnesses), model it as an 'array' with an 'items' schema. Mark fields as 'required' when they are explicitly present in the document. Do not invent values or add sample valuesï¿½only define the schema shape and constraints inferred from the text. If a field's type is ambiguous, choose the most general appropriate type. Return strictly valid JSON (no comments, no extra text and no revised version). Document Text: \"\"\"{context}\"\"\""
        }
    }
}