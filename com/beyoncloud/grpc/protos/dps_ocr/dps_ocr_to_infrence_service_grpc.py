# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: com/beyoncloud/grpc/protos/dps_ocr/dps_ocr_to_infrence_service.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import com.beyoncloud.grpc.protos.dps_ocr.dps_ocr_to_infrence_service_pb2


class DpsOcrInfServiceBase(abc.ABC):

    @abc.abstractmethod
    async def get_dpsocr_inf_response(self, stream: 'grpclib.server.Stream[com.beyoncloud.grpc.protos.dps_ocr.dps_ocr_to_infrence_service_pb2.DpsOcrToInferenceRequest, com.beyoncloud.grpc.protos.dps_ocr.dps_ocr_to_infrence_service_pb2.DpsOcrToInferenceResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/ocrinfrence.DpsOcrInfService/get_dpsocr_inf_response': grpclib.const.Handler(
                self.get_dpsocr_inf_response,
                grpclib.const.Cardinality.UNARY_UNARY,
                com.beyoncloud.grpc.protos.dps_ocr.dps_ocr_to_infrence_service_pb2.DpsOcrToInferenceRequest,
                com.beyoncloud.grpc.protos.dps_ocr.dps_ocr_to_infrence_service_pb2.DpsOcrToInferenceResponse,
            ),
        }


class DpsOcrInfServiceStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.get_dpsocr_inf_response = grpclib.client.UnaryUnaryMethod(
            channel,
            '/ocrinfrence.DpsOcrInfService/get_dpsocr_inf_response',
            com.beyoncloud.grpc.protos.dps_ocr.dps_ocr_to_infrence_service_pb2.DpsOcrToInferenceRequest,
            com.beyoncloud.grpc.protos.dps_ocr.dps_ocr_to_infrence_service_pb2.DpsOcrToInferenceResponse,
        )
